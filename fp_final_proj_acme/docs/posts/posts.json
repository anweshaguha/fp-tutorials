[
  {
    "path": "posts/2022-06-04-functional-programming-for-data-visualization/",
    "title": "Functional Programming for Data Visualization",
    "description": "Developing a function to visualize survey data",
    "author": [
      {
        "name": "Manuel Vazquez",
        "url": "https://example.com/norajones"
      }
    ],
    "date": "2022-06-04",
    "categories": [],
    "contents": "\r\nIntroduction\r\nThis tutorial will walk through an applied example to show how to\r\nsimulate survey data and create a function to graph survey data using\r\ndivergent, stacked bar charts. Creating this function would allow the\r\nuser to graph survey data to any of their liking!\r\nSimulating data\r\nWe begin by simulating some survey data. We will simulate responses\r\nto 5 questions that use a likert item with a scale of one to four. To\r\nease the simulation of the data, we will create a function to generate\r\nthis data. The function has 5 formals or arguments:\r\nmax - An integer that represents the maximum of the\r\nlikert scale. Since the items we are developing are on a 4 point scale,\r\nthen we will add 4. If we wanted to simulate items on a 7 point scale,\r\nthen we would add a 7 to this argument.\r\nn - An integer that represents the total number\r\nobservations that the user wishes to generate\r\nweights - A list of weights that the user specifies\r\nto influence the frequency of certain responses. The length of the\r\nvector should be equal to the max.\r\nlevels - A numeric vector that lists the numeric\r\nnumber tied to each response. It should start with 1 and end with the\r\nmax number specified.\r\nlabels - A character vector with the labels\r\nattached to the numeric values.\r\n\r\nThe function below also provides an error message in case certain\r\nformals are not specified correctly.\r\n\r\n\r\nlikert_sim <- function(max, n, weights, levels,labels) {\r\n  if ((length(levels) == length(labels)) & (length(weights) == max))  {\r\n  factor(sample(1:max, n, replace = TRUE, prob = weights),\r\n         levels = levels,\r\n         labels = labels)\r\n  } else {\r\n  stop(\"Are the length of your labels, levels, or weights equal to the likert item specified? \",  \r\n          \" The scale is on a \", max, \" point likert item scale. Did you add sufficient arguments?  \",\r\n         \", Number of weight arguments added was \",length(weights),\r\n         \", Number of labels arguments added was \", length(labels),\r\n         \", Number of level arguments added was, \", length(levels))\r\n  }\r\n}\r\n\r\n\r\n\r\nUsing this function, we simulate the data for five questions which we\r\ncall q1… to q5. The sample scale we will simulate will be a 4 point\r\nagreement scale ranging from strongly disagree to strongly agree. Before\r\nrunning the function, we define the levels and the labels. Again, the\r\nlengths of each of these vectors should be similar.\r\n\r\n\r\nlevels <- c(1,2,3,4)\r\nlabels <- c(\"Strongly disagree\", \"Disagree\", \"Agree\", \"Strongly agree\")\r\n\r\n\r\n\r\nBelow, we use the simulate function we just created to generate 5\r\nsimulated responses with varying weights in responses. To do this, we\r\nuse the levels and labels vectors defined above and plug those in to the\r\nfunction we defined. We define a matrix with variying weights that we\r\nwill use in the function. We will use the map command to loop through\r\nthe function five times, and generate a list with five items.\r\n\r\n\r\nallWeights <- matrix(c(.20,.30,.25,.25,\r\n                     .10,.50,.15,.25,\r\n                     .25,.10,.50,.15,\r\n                     .30,.30,.10,.30,\r\n                     .39,.45,.15,.10),\r\n                   nrow=5,ncol=4,byrow=TRUE)\r\n\r\n allQ <- map(1:5, ~likert_sim(4, 250, allWeights[.x,], levels, labels)) \r\n\r\n\r\n\r\nAfter we simulate this data, we bind it together into a data frame\r\nand generate a random respone ID. The data is now ready to be\r\ngraphed!\r\n\r\n\r\nsurveydf <- reduce(allQ, cbind) \r\ncolnames(surveydf) <- c(\"q1\",\"q2\",\"q3\",\"q4\",\"q5\")\r\n\r\nsurveydf <- surveydf %>%\r\n  as_tibble() %>%\r\n  mutate(id = ids::random_id(250, 4))\r\n\r\n\r\n\r\nCreate a function to graph\r\nthe data\r\nNow that we have the data simulated, we are ready to graph. In order\r\nto create a divergent horizontal bar chart, we need to take on two\r\nsteps. First, we need to transform the data so that it summarizes mean\r\nresponses and it is in a format that allows for graphing in bar format.\r\nThis means that we need to summarize and pivot the data in a long\r\nformat. After we summarize and prep the data, we move on to second step\r\nwhich is to actually graph the data using ggplot. We will\r\ncreate a function that corresponds to each of these two steps, and then\r\napply those two functions together to graph the information.\r\nTo begin, we will create a function that collapses and pivots the\r\ndata. The function has 4 arguments:\r\ndf  - specifies the data frame to be used,\r\ncols - is a list of the name of the columns we wish\r\nto include,\r\nlabels - Labels of the responses\r\nlevels - Numeric values of the responses\r\n\r\n\r\nsumm_likert <- function(df,mincol,maxcol,labels,levels) {\r\n  df %>%\r\n  pivot_longer(\r\n    cols = {{mincol}}:{{maxcol}},\r\n    names_to = \"question\",\r\n    values_to = \"frequency\") %>%\r\n  group_by(question,frequency) %>%\r\n    count(name = \"n_answers\") %>%\r\n  group_by(question) %>%\r\n  mutate(percent_answers = round((n_answers / sum(n_answers))*100, 0),\r\n         frequency = factor(frequency,\r\n                           levels = levels,\r\n                           labels = labels)) %>%\r\n  mutate(percent_answers = if_else(frequency == labels[1] | frequency == labels[2],\r\n                                   -1*percent_answers,percent_answers))\r\n}\r\n\r\n\r\n\r\nHere, we use the head command to check how well the function\r\nworks. Note that for the last two arguments — labels and levels — I am\r\nusing the vectors that were defined earlier in the data simulation step.\r\nYou will notice that the percent_answers column has some negative\r\nanswers. This was done on purpose so that responses that are more\r\nnegative fall to the left of zero. This is needed in order to graph the\r\nlikert items in a divergent bar chart.\r\n\r\n\r\nhead(summ_likert(surveydf,q1,q5,labels,levels))\r\n\r\n\r\n# A tibble: 6 x 4\r\n# Groups:   question [2]\r\n  question frequency         n_answers percent_answers\r\n  <chr>    <fct>                 <int>           <dbl>\r\n1 q1       Strongly disagree        48             -19\r\n2 q1       Disagree                 79             -32\r\n3 q1       Agree                    60              24\r\n4 q1       Strongly agree           63              25\r\n5 q2       Strongly disagree        24             -10\r\n6 q2       Disagree                135             -54\r\n\r\nNext, we define a function to graph the data. The function will only\r\nhave one argument, df. This argument refers to the data\r\nframe\r\n\r\n\r\ngraph_likert <- function(df) {\r\n  df %>%\r\n  ggplot(aes(x = question,\r\n             y = percent_answers,\r\n             fill = frequency)) + \r\n  geom_bar(stat = \"identity\") +\r\n  geom_text(aes(label = abs(percent_answers)),\r\n            position = position_stack(vjust = 0.5),\r\n            color = \"white\",\r\n            fontface = \"bold\") +\r\n  geom_hline(yintercept = 0) +\r\n  coord_flip() +\r\n  scale_fill_brewer(palette = \"RdYlGn\") +\r\n  theme_minimal() +\r\n  labs(fill = NULL) +\r\n  theme(axis.text.x = element_blank(),\r\n        axis.title.x = element_blank(),\r\n        panel.grid = element_blank(),\r\n        legend.position = \"top\")\r\n}\r\n\r\n\r\n\r\nApply the function\r\nFinally, we can apply the function to graph the simulated data. We\r\ncan do this by using the function that pivots the data\r\n(summ_likert) and pass through the function that graphs the\r\ndata (graph_likert), and that is it! If you have multiple\r\nquestions, you can reuse this function and reduce the code you\r\nwrite!\r\n\r\n\r\nsumm_likert(surveydf,q1,q5,labels,levels) %>%\r\n  graph_likert()\r\n\r\n\r\n\r\n\r\nYou can also add some further customization to make the graph easier\r\nto read. For example, I can add a title and subtitle to the graph as\r\nwell as meaningful x labels to the graph.\r\n\r\n\r\nsumm_likert(surveydf,q1,q5,labels,levels) %>%\r\n  graph_likert() +\r\n  labs(x =\" \",\r\n      title = \"To what extent do you agree with the following?\",\r\n       subtitle = \"I consider myself good at\") +\r\n  scale_x_discrete(labels=c(\"Teaching content to \\n\\ EL students\", \r\n                            \"Assessing EL students\", \r\n                            \"Leveraging EL student \\n\\ background in instruction\", \r\n                            \"Supporting English \\n\\ proficiency development\", \r\n                            \"Honoring EL students' \\n\\ background and culture\")) +\r\n  theme(plot.title.position = \"plot\")\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "preview": "posts/2022-06-04-functional-programming-for-data-visualization/functional-programming-for-data-visualization_files/figure-html5/unnamed-chunk-7-1.png",
    "last_modified": "2022-06-04T16:08:12-07:00",
    "input_file": {}
  },
  {
    "path": "posts/welcome/",
    "title": "Welcome to fp_final_proj_acme",
    "description": "Welcome to our new blog, fp_final_proj_acme. We hope you enjoy \nreading what we have to say!",
    "author": [
      {
        "name": "Nora Jones",
        "url": "https://example.com/norajones"
      }
    ],
    "date": "2022-06-04",
    "categories": [],
    "contents": "\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2022-06-04T16:02:23-07:00",
    "input_file": {}
  },
  {
    "path": "posts/2022-06-04-creating-general-data-simulation-tools/",
    "title": "Creating General Data Simulation Tools",
    "description": "Create your own functions to easily simulate datasets!",
    "author": [
      {
        "name": "Errol Kaylor",
        "url": "https://example.com/norajones"
      }
    ],
    "date": "2022-06-04",
    "categories": [],
    "contents": "\r\nOutline\r\nOverall goal: demonstrate ways to generate datasets for classroom\r\nuse!\r\nPart 1: Mocking data based on existing data set (of\r\nnumerical/character data) - Load in data, and produce descriptive stats.\r\n- Create a list of the columns/data types that are you are looking to\r\nmock up. - Populate the list with mocked data, depending on the types. -\r\nLoop through the process, depending on # of data sets needed. -\r\nDemonstrate function that walks them through the process – Simulating\r\ndifferent types of data! - Mocking numerical data – Distribution\r\nfunctions, lists - Mocking character data – Use of stringi for character\r\nstrings – Generate strings of specific length/format - Mocking logical\r\ndata – Mock survey data\r\n\r\n\r\nlibrary(palmerpenguins)\r\nlibrary(stats)\r\nlibrary(psych)\r\nlibrary(ggplot2)\r\nlibrary(tidyverse)\r\npenguins\r\n\r\n\r\n# A tibble: 344 x 8\r\n   species island    bill_length_mm bill_depth_mm flipper_length_mm\r\n   <fct>   <fct>              <dbl>         <dbl>             <int>\r\n 1 Adelie  Torgersen           39.1          18.7               181\r\n 2 Adelie  Torgersen           39.5          17.4               186\r\n 3 Adelie  Torgersen           40.3          18                 195\r\n 4 Adelie  Torgersen           NA            NA                  NA\r\n 5 Adelie  Torgersen           36.7          19.3               193\r\n 6 Adelie  Torgersen           39.3          20.6               190\r\n 7 Adelie  Torgersen           38.9          17.8               181\r\n 8 Adelie  Torgersen           39.2          19.6               195\r\n 9 Adelie  Torgersen           34.1          18.1               193\r\n10 Adelie  Torgersen           42            20.2               190\r\n# ... with 334 more rows, and 3 more variables: body_mass_g <int>,\r\n#   sex <fct>, year <int>\r\n\r\n#first function, tell us descriptives, and show us some boxplots?\r\nstr(penguins)\r\n\r\n\r\ntibble [344 x 8] (S3: tbl_df/tbl/data.frame)\r\n $ species          : Factor w/ 3 levels \"Adelie\",\"Chinstrap\",..: 1 1 1 1 1 1 1 1 1 1 ...\r\n $ island           : Factor w/ 3 levels \"Biscoe\",\"Dream\",..: 3 3 3 3 3 3 3 3 3 3 ...\r\n $ bill_length_mm   : num [1:344] 39.1 39.5 40.3 NA 36.7 39.3 38.9 39.2 34.1 42 ...\r\n $ bill_depth_mm    : num [1:344] 18.7 17.4 18 NA 19.3 20.6 17.8 19.6 18.1 20.2 ...\r\n $ flipper_length_mm: int [1:344] 181 186 195 NA 193 190 181 195 193 190 ...\r\n $ body_mass_g      : int [1:344] 3750 3800 3250 NA 3450 3650 3625 4675 3475 4250 ...\r\n $ sex              : Factor w/ 2 levels \"female\",\"male\": 2 1 1 NA 1 2 1 2 NA NA ...\r\n $ year             : int [1:344] 2007 2007 2007 2007 2007 2007 2007 2007 2007 2007 ...\r\n\r\nspecies_tables <- describeBy(penguins,group=\"species\")\r\n\r\nspecies_tables\r\n\r\n\r\n\r\n Descriptive statistics by group \r\nspecies: Adelie\r\n                  vars   n    mean     sd median trimmed    mad\r\nspecies*             1 152    1.00   0.00    1.0    1.00   0.00\r\nisland*              2 152    2.05   0.80    2.0    2.07   1.48\r\nbill_length_mm       3 151   38.79   2.66   38.8   38.75   2.97\r\nbill_depth_mm        4 151   18.35   1.22   18.4   18.29   1.19\r\nflipper_length_mm    5 151  189.95   6.54  190.0  189.93   7.41\r\nbody_mass_g          6 151 3700.66 458.57 3700.0 3685.74 444.78\r\nsex*                 7 146    1.50   0.50    1.5    1.50   0.74\r\nyear                 8 152 2008.01   0.82 2008.0 2008.02   1.48\r\n                     min    max  range  skew kurtosis    se\r\nspecies*             1.0    1.0    0.0   NaN      NaN  0.00\r\nisland*              1.0    3.0    2.0 -0.09    -1.43  0.06\r\nbill_length_mm      32.1   46.0   13.9  0.16    -0.23  0.22\r\nbill_depth_mm       15.5   21.5    6.0  0.31    -0.14  0.10\r\nflipper_length_mm  172.0  210.0   38.0  0.09     0.24  0.53\r\nbody_mass_g       2850.0 4775.0 1925.0  0.28    -0.63 37.32\r\nsex*                 1.0    2.0    1.0  0.00    -2.01  0.04\r\nyear              2007.0 2009.0    2.0 -0.02    -1.53  0.07\r\n---------------------------------------------------- \r\nspecies: Chinstrap\r\n                  vars  n    mean     sd  median trimmed    mad\r\nspecies*             1 68    2.00   0.00    2.00    2.00   0.00\r\nisland*              2 68    2.00   0.00    2.00    2.00   0.00\r\nbill_length_mm       3 68   48.83   3.34   49.55   48.91   3.63\r\nbill_depth_mm        4 68   18.42   1.14   18.45   18.42   1.41\r\nflipper_length_mm    5 68  195.82   7.13  196.00  195.75   7.41\r\nbody_mass_g          6 68 3733.09 384.34 3700.00 3719.64 370.65\r\nsex*                 7 68    1.50   0.50    1.50    1.50   0.74\r\nyear                 8 68 2007.97   0.86 2008.00 2007.96   1.48\r\n                     min    max  range  skew kurtosis    se\r\nspecies*             2.0    2.0    0.0   NaN      NaN  0.00\r\nisland*              2.0    2.0    0.0   NaN      NaN  0.00\r\nbill_length_mm      40.9   58.0   17.1 -0.09    -0.14  0.40\r\nbill_depth_mm       16.4   20.8    4.4  0.01    -0.96  0.14\r\nflipper_length_mm  178.0  212.0   34.0 -0.01    -0.13  0.86\r\nbody_mass_g       2700.0 4800.0 2100.0  0.24     0.36 46.61\r\nsex*                 1.0    2.0    1.0  0.00    -2.03  0.06\r\nyear              2007.0 2009.0    2.0  0.06    -1.68  0.10\r\n---------------------------------------------------- \r\nspecies: Gentoo\r\n                  vars   n    mean     sd median trimmed    mad\r\nspecies*             1 124    3.00   0.00    3.0    3.00   0.00\r\nisland*              2 124    1.00   0.00    1.0    1.00   0.00\r\nbill_length_mm       3 123   47.50   3.08   47.3   47.38   3.11\r\nbill_depth_mm        4 123   14.98   0.98   15.0   14.94   1.19\r\nflipper_length_mm    5 123  217.19   6.48  216.0  216.83   5.93\r\nbody_mass_g          6 123 5076.02 504.12 5000.0 5073.48 555.98\r\nsex*                 7 119    1.51   0.50    2.0    1.52   0.00\r\nyear                 8 124 2008.08   0.79 2008.0 2008.10   1.48\r\n                     min    max  range  skew kurtosis    se\r\nspecies*             3.0    3.0    0.0   NaN      NaN  0.00\r\nisland*              1.0    1.0    0.0   NaN      NaN  0.00\r\nbill_length_mm      40.9   59.6   18.7  0.64     1.13  0.28\r\nbill_depth_mm       13.1   17.3    4.2  0.32    -0.65  0.09\r\nflipper_length_mm  203.0  231.0   28.0  0.39    -0.64  0.58\r\nbody_mass_g       3950.0 6300.0 2350.0  0.07    -0.78 45.45\r\nsex*                 1.0    2.0    1.0 -0.05    -2.01  0.05\r\nyear              2007.0 2009.0    2.0 -0.14    -1.41  0.07\r\n\r\npenguins %>% \r\n  na.omit() %>% \r\n  ggplot(aes(x = bill_depth_mm, y = bill_length_mm))+\r\n  geom_point(aes(color = species))+\r\n  theme_minimal()\r\n\r\n\r\n\r\nsamp <- rchisq(600,df=3)\r\n\r\nqqplot(qchisq(ppoints(500),df=3),samp)\r\n\r\n\r\n\r\ngentoo <- penguins %>% \r\n  filter(species == \"Gentoo\")\r\n\r\n\r\n# are my numerics normal? \r\nnums <- rnorm(n=124,mean=47.50,sd=3.08)\r\n\r\ndescribe(nums)\r\n\r\n\r\n   vars   n  mean   sd median trimmed  mad   min   max range  skew\r\nX1    1 124 47.39 3.32  47.46   47.49 3.16 37.72 54.86 17.14 -0.26\r\n   kurtosis  se\r\nX1     0.06 0.3\r\n\r\ngentoo$bill_length_mm\r\n\r\n\r\n  [1] 46.1 50.0 48.7 50.0 47.6 46.5 45.4 46.7 43.3 46.8 40.9 49.0 45.5\r\n [14] 48.4 45.8 49.3 42.0 49.2 46.2 48.7 50.2 45.1 46.5 46.3 42.9 46.1\r\n [27] 44.5 47.8 48.2 50.0 47.3 42.8 45.1 59.6 49.1 48.4 42.6 44.4 44.0\r\n [40] 48.7 42.7 49.6 45.3 49.6 50.5 43.6 45.5 50.5 44.9 45.2 46.6 48.5\r\n [53] 45.1 50.1 46.5 45.0 43.8 45.5 43.2 50.4 45.3 46.2 45.7 54.3 45.8\r\n [66] 49.8 46.2 49.5 43.5 50.7 47.7 46.4 48.2 46.5 46.4 48.6 47.5 51.1\r\n [79] 45.2 45.2 49.1 52.5 47.4 50.0 44.9 50.8 43.4 51.3 47.5 52.1 47.5\r\n [92] 52.2 45.5 49.5 44.5 50.8 49.4 46.9 48.4 51.1 48.5 55.9 47.2 49.1\r\n[105] 47.3 46.8 41.7 53.4 43.3 48.1 50.5 49.8 43.5 51.5 46.2 55.1 44.5\r\n[118] 48.8 47.2   NA 46.8 50.4 45.2 49.9\r\n\r\ndescribe(gentoo)\r\n\r\n\r\n                  vars   n    mean     sd median trimmed    mad\r\nspecies*             1 124    3.00   0.00    3.0    3.00   0.00\r\nisland*              2 124    1.00   0.00    1.0    1.00   0.00\r\nbill_length_mm       3 123   47.50   3.08   47.3   47.38   3.11\r\nbill_depth_mm        4 123   14.98   0.98   15.0   14.94   1.19\r\nflipper_length_mm    5 123  217.19   6.48  216.0  216.83   5.93\r\nbody_mass_g          6 123 5076.02 504.12 5000.0 5073.48 555.98\r\nsex*                 7 119    1.51   0.50    2.0    1.52   0.00\r\nyear                 8 124 2008.08   0.79 2008.0 2008.10   1.48\r\n                     min    max  range  skew kurtosis    se\r\nspecies*             3.0    3.0    0.0   NaN      NaN  0.00\r\nisland*              1.0    1.0    0.0   NaN      NaN  0.00\r\nbill_length_mm      40.9   59.6   18.7  0.64     1.13  0.28\r\nbill_depth_mm       13.1   17.3    4.2  0.32    -0.65  0.09\r\nflipper_length_mm  203.0  231.0   28.0  0.39    -0.64  0.58\r\nbody_mass_g       3950.0 6300.0 2350.0  0.07    -0.78 45.45\r\nsex*                 1.0    2.0    1.0 -0.05    -2.01  0.05\r\nyear              2007.0 2009.0    2.0 -0.14    -1.41  0.07\r\n\r\nGoal of this tutorial: creating a general purpose function for\r\nmocking up datasets!\r\nOur first targeted dataset is palmers penguins, however we will then\r\nlook at more complex composite datasets, and randomness.\r\nStep 1: analyze the existing dataset- for our purposes, we will be\r\nmatching *insert data types that will be included here, and how we are\r\nmatching.\r\nTaking an intial look at the data, an intuitive sense may be that the\r\nnumbers we’re seeing have something some distinctions that might be\r\nimportant to capture - let’s try an obvious one, and try our descriptive\r\nstatistics grouped by species.\r\nAs it turns out, there are some differences (maybe not significant\r\nbut we’ll find out) in our data! Again, let’s look at our selected data\r\nand sample to create our distribution to create it from - Adelie\r\npenguins, for simplicity sake!\r\nAt this point we can make\r\nMimicing using stats functions, create as wrappers essentially.\r\n#General workflow- overall goal is return a dataframe? Why not at\r\nthis point Looping through df, understand intended distribution level to\r\nwork with 1. Data Type?\r\n\r\n\r\n\r\n",
    "preview": "posts/2022-06-04-creating-general-data-simulation-tools/creating-general-data-simulation-tools_files/figure-html5/unnamed-chunk-1-1.png",
    "last_modified": "2022-06-04T16:21:18-07:00",
    "input_file": "creating-general-data-simulation-tools.knit.md"
  }
]
